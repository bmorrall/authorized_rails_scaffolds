class AuthorizedRailsScaffolds::RailsScaffoldControllerHelper < AuthorizedRailsScaffolds::Helper
  include AuthorizedRailsScaffolds::Macros::ControllerMacros
  include AuthorizedRailsScaffolds::Macros::RouteExampleMacros

  def initialize(options = {})
    super options

    # Modularized class name generated by spec generator
    @controller_class_name = options[:controller_class_name]

    @modular_class_name = options[:class_name] || options[:local_class_name]
  end

  # Class name with parent modules included (i.e. Example::FooBar)
  # Name of class assumed by default generators, used as a base for determining modules and class
  def modular_class_name
    @modular_class_name
  end

  def load_and_authorize_parent(model_name)
    load_resource_code = "load_and_authorize_resource #{parent_sym(model_name)}"

    parent_model = model_parent_name(model_name)
    unless parent_model.nil?
      load_resource_code += ", :through => #{parent_sym(parent_model)}"
    end

    load_resource_code
  end

  def load_resource
    load_resource_code = "load_resource #{resource_symbol}"

    if parent_models.any?
      load_resource_code += ", :through => #{parent_sym(parent_model_names.last)}"
    end

    if shallow_routes?
      load_resource_code += ", :shallow => true"
    end

    load_resource_code
  end

end