require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

<% module_namespacing do -%>
<%- local_class_name = class_name.split("::")[-1] -%>
describe <%= controller_class_name %>Controller do

  # This should return the minimal set of attributes required to create a valid
  # <%= local_class_name %>.
  def valid_create_attributes
    FactoryGirl.attributes_for(:<%= file_name %>)
  end

  # This should return the minimal set of attributes required to update a valid
  # <%= local_class_name %>.
  def valid_update_attributes
    FactoryGirl.attributes_for(:<%= file_name %>)
  end

<% unless options[:singleton] -%>
  describe "GET index" do
    context 'without a user' do
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :index, {}
        end
        it { should redirect_to(new_user_session_path) }
        it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
      end
    end
    context 'as an unauthorized user' do
      login_unauthorized_user
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :index, {}
        end
        it { should redirect_to(root_url) }
        it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
      end
    end
    context 'as user with read ability' do
      login_user_with_ability :read, <%= local_class_name %>
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :index, {}
        end
        it { should respond_with(:success) }
        it { should render_template(:index) }
        it { should render_with_layout(:application) }
        it "assigns all <%= file_name.pluralize %> as @<%= file_name.pluralize %>" do
          assigns(:<%= file_name.pluralize %>).should eq([@<%= file_name %>])
        end
      end
    end
  end

<% end -%>
  describe "GET show" do
    context 'without a user' do
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :show, {:id => @<%= file_name %>.to_param}
        end
        it { should redirect_to(new_user_session_path) }
        it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
      end
    end
    context 'as an unauthorized user' do
      login_unauthorized_user
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :show, {:id => @<%= file_name %>.to_param}
        end
        it { should redirect_to(<%= index_helper %>_path) }
        it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
      end
    end
    context 'as user with read ability' do
      login_user_with_ability :read, <%= local_class_name %>
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :show, {:id => @<%= file_name %>.to_param}
        end
        it { should respond_with(:success) }
        it { should render_template(:show) }
        it { should render_with_layout(:application) }
        it "assigns the requested <%= file_name %> as @<%= file_name %>" do
          assigns(:<%= file_name %>).should eq(@<%= file_name %>)
        end
      end
    end
  end

  describe "GET new" do
    context 'without a user' do
      describe 'with valid request' do
        before(:each) do
          get :new, {}
        end
        it { should redirect_to(new_user_session_path) }
        it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
      end
    end
    context 'as an unauthorized user' do
      login_unauthorized_user
      describe 'with valid request' do
        before(:each) do
          get :new, {}
        end
        it { should redirect_to(<%= index_helper %>_url) }
        it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
      end
    end
    context 'as user with create ability' do
      login_user_with_ability :create, <%= local_class_name %>
      describe 'with valid request' do
        before(:each) do
          get :new, {}
        end
        it { should respond_with(:success) }
        it { should render_template(:new) }
        it { should render_with_layout(:application) }
        it "assigns a new <%= file_name %> as @<%= file_name %>" do
          assigns(:<%= file_name %>).should be_a_new(<%= local_class_name %>)
        end
      end
    end
  end

  describe "GET edit" do
    context 'without a user' do
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :edit, {:id => @<%= file_name %>.to_param}
        end
        it { should redirect_to(new_user_session_path) }
        it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
      end
    end
    context 'as an unauthorized user' do
      login_unauthorized_user
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :edit, {:id => @<%= file_name %>.to_param}
        end
        it { should redirect_to(<%= index_helper %>_url) }
        it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
      end
    end
    context 'as user with update ability' do
      login_user_with_ability :update, <%= local_class_name %>
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          get :edit, {:id => @<%= file_name %>.to_param}
        end
        it { should respond_with(:success) }
        it { should render_template(:edit) }
        it { should render_with_layout(:application) }
        it "assigns the requested <%= file_name %> as @<%= file_name %>" do
          assigns(:<%= file_name %>).should eq(@<%= file_name %>)
        end
      end
    end
  end

  describe "POST create" do
    context 'without a user' do
      describe 'with valid params' do
        before(:each) do
          post :create, {:<%= file_name %> => valid_create_attributes}
        end
        it { should redirect_to(new_user_session_path) }
        it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
      end
    end
    context 'as an unauthorized user' do
      login_unauthorized_user
      describe "with valid params" do
        before(:each) do
          post :create, {:<%= file_name %> => valid_create_attributes}
        end
        it { should redirect_to(<%= index_helper %>_url) }
        it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
      end
    end
    context 'as user with create ability' do
      login_user_with_ability :create, <%= local_class_name %>
      describe "with valid params" do
        it "creates a new <%= local_class_name %>" do
          expect {
            post :create, {:<%= file_name %> => valid_create_attributes}
          }.to change(<%= local_class_name %>, :count).by(1)
        end
      end
      describe 'with valid params' do
        before(:each) do
          post :create, {:<%= file_name %> => valid_create_attributes}
        end
        it "assigns a newly created <%= file_name %> as @<%= file_name %>" do
          assigns(:<%= file_name %>).should be_a(<%= local_class_name %>)
          assigns(:<%= file_name %>).should be_persisted
        end
        it "redirects to the created <%= file_name %>" do
          response.should redirect_to(<%= ns_file_name %>_path(<%= local_class_name %>.last))
        end
      end
      describe "with invalid params" do
        before(:each) do
          # Trigger the behavior that occurs when invalid params are submitted
          <%= local_class_name %>.any_instance.stub(:save).and_return(false)
          post :create, {:<%= file_name %> => <%= formatted_hash(example_invalid_attributes) %>}
        end
        it { should render_template(:new) }
        it { should render_with_layout(:application) }
        it "assigns a newly created but unsaved <%= file_name %> as @<%= file_name %>" do
          assigns(:<%= file_name %>).should be_a_new(<%= local_class_name %>)
        end
      end
    end
  end

  describe "PUT update" do
    context 'without a user' do
      describe 'with valid params' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          put :update, {:id => @<%= file_name %>.to_param, :<%= file_name %> => valid_update_attributes}
        end
        it { should redirect_to(new_user_session_path) }
        it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
      end
    end
    context 'as an unauthorized user' do
      login_unauthorized_user
      describe "with valid params" do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          put :update, {:id => @<%= file_name %>.to_param, :<%= file_name %> => valid_update_attributes}
        end
        it { should redirect_to(<%= index_helper %>_url) }
        it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
      end
    end
    context 'as user with update ability' do
      login_user_with_ability :update, <%= local_class_name %>
      describe "with valid params" do
        it "updates the requested <%= file_name %>" do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          # Assuming there are no other <%= file_name %> in the database, this
          # specifies that the <%= local_class_name %> created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          <%- if Rails.version >= '4' -%>
          <%= local_class_name %>.any_instance.should_receive(:update).with(<%= formatted_hash(example_params_for_update) %>)
          <%- else -%>
          <%= local_class_name %>.any_instance.should_receive(:update_attributes).with(<%= formatted_hash(example_params_for_update) %>)
          <%- end -%>
          put :update, {:id => @<%= file_name %>.to_param, :<%= file_name %> => <%= formatted_hash(example_params_for_update) %>}
        end
      end
      describe "with valid params" do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          put :update, {:id => @<%= file_name %>.to_param, :<%= file_name %> => valid_update_attributes}
        end
        it "assigns the requested <%= file_name %> as @<%= file_name %>" do
          assigns(:<%= file_name %>).should eq(@<%= file_name %>)
        end
        it "redirects to the <%= file_name %>" do
          response.should redirect_to(<%= ns_file_name %>_path(@<%= file_name %>))
        end
      end
      describe "with invalid params" do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          # Trigger the behavior that occurs when invalid params are submitted
          <%= local_class_name %>.any_instance.stub(:save).and_return(false)
          put :update, {:id => @<%= file_name %>.to_param, :<%= file_name %> => <%= formatted_hash(example_invalid_attributes) %>}
        end
        it { should render_template(:edit) }
        it { should render_with_layout(:application) }
        it "assigns the <%= file_name %> as @<%= file_name %>" do
          assigns(:<%= file_name %>).should eq(@<%= file_name %>)
        end
      end
    end
  end

  describe "DELETE destroy" do
    context 'without a user' do
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          delete :destroy, {:id => @<%= file_name %>.to_param}
        end
        it { should redirect_to(new_user_session_path) }
        it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
      end
    end
    context 'as an unauthorized user' do
      login_unauthorized_user
      describe "with valid request" do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          delete :destroy, {:id => @<%= file_name %>.to_param}
        end
        it { should redirect_to(<%= index_helper %>_url) }
        it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
      end
    end
    context 'as user with destroy ability' do
      login_user_with_ability :destroy, <%= local_class_name %>
      it "destroys the requested <%= file_name %>" do
        @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
        expect {
          delete :destroy, {:id => @<%= file_name %>.to_param}
        }.to change(<%= local_class_name %>, :count).by(-1)
      end
      describe 'with valid request' do
        before(:each) do
          @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
          delete :destroy, {:id => @<%= file_name %>.to_param}
        end
        it "redirects to the <%= file_name %> list" do
          response.should redirect_to(<%= index_helper %>_url)
        end
      end
    end
  end

end
<% end -%>